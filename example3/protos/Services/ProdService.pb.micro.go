// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ProdService.proto

package Services

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProdService service

func NewProdServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProdService service

type ProdService interface {
	GetProdsList(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdListResponse, error)
	GetProdsDetail(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdDetailResponse, error)
}

type prodService struct {
	c    client.Client
	name string
}

func NewProdService(name string, c client.Client) ProdService {
	return &prodService{
		c:    c,
		name: name,
	}
}

func (c *prodService) GetProdsList(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdListResponse, error) {
	req := c.c.NewRequest(c.name, "ProdService.GetProdsList", in)
	out := new(ProdListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodService) GetProdsDetail(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdDetailResponse, error) {
	req := c.c.NewRequest(c.name, "ProdService.GetProdsDetail", in)
	out := new(ProdDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProdService service

type ProdServiceHandler interface {
	GetProdsList(context.Context, *ProdsRequest, *ProdListResponse) error
	GetProdsDetail(context.Context, *ProdsRequest, *ProdDetailResponse) error
}

func RegisterProdServiceHandler(s server.Server, hdlr ProdServiceHandler, opts ...server.HandlerOption) error {
	type prodService interface {
		GetProdsList(ctx context.Context, in *ProdsRequest, out *ProdListResponse) error
		GetProdsDetail(ctx context.Context, in *ProdsRequest, out *ProdDetailResponse) error
	}
	type ProdService struct {
		prodService
	}
	h := &prodServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProdService{h}, opts...))
}

type prodServiceHandler struct {
	ProdServiceHandler
}

func (h *prodServiceHandler) GetProdsList(ctx context.Context, in *ProdsRequest, out *ProdListResponse) error {
	return h.ProdServiceHandler.GetProdsList(ctx, in, out)
}

func (h *prodServiceHandler) GetProdsDetail(ctx context.Context, in *ProdsRequest, out *ProdDetailResponse) error {
	return h.ProdServiceHandler.GetProdsDetail(ctx, in, out)
}
